--


=============================================


正则表达式

.	一个字符
..	两个字符
^#	以#号开头
#$	以#号结束
[abc]	包含a或b或c的都匹配
[^abc]	只要出现了abc这三个字母以外的字符就都匹配       --重点
^[abc]  以a开头或以b开头或以c开头
^[^abc] 不以a开头或不以b开头或不以c开头
a+	匹配至少一个或多个a
a*	匹配0或多个a
a?	匹配0或1个a



大写 [[:upper:]]  [A－Z]
小写 [[:lower:]]  [a-z]
字母 [[:alpha:]] [a-Z]	
字母数字 [[:alnum:]]
空格或者制表符 [[:blank:]]
纯数字 [[:digit:]] [0-9]
标点符号 [[:punct:]]


========================================================



显示查出的行在原文件的行号加n参数	grep -n root /etc/passwd		
反向查找加v参数  grep -v bin /etc/passwd
大小写不敏感加i参数  grep -ni root grep.txt 



查找出有rot或者是rat的行 grep -n r[oa]t grep.txt --注意的是，［ ］括号内不论几个字符，都是选一个

查找一个非r字符加oot连在一起的行 grep  '[^r]oot' grep.txt

查找不以小写字母开头  grep  '[^a-z]oo' grep.txt 	

--记住： [] 里的^为取反   ，外面的为以它开头


查找非全部为小写字母的字符串行  grep [^a-z] grep.txt 



[root@dns shell03]# grep  '^[a-z]oot' grep.txt 
root
boot
[root@dns shell03]# grep  '[^a-z]oot' grep.txt   --表示有一个非小写字符连着oot的就会被找出来
Root
Boot



[root@li test]# cat test 
root
Root
rot
boot
Rot
[root@li test]# grep '[^A-Z]o' test   --查找不以大写字母的一个字符连着一个o
root
Root
rot
boot
[root@li test]# grep '[^A-Z]oo' test  --查找不以大写字母的一个字符连着两个o
root
boot
[root@li test]# grep '^[^A-Z]' test --这等同于不以大写字母开头（但可以以小写，数字，或空格等开头)
root
rot
boot



查找不以大写字母开头   grep '[^[:upper:]]' grep.txt 
			grep  '^[^A-Z]' grep.txt 


查找有数字的号   grep '[0-9]' grep.txt 
		或者 grep [[:digit:]] grep.txt 


查找一个数字和一个字母连起来的行

			grep '[0-9][a-Z]' grep.txt 

行首^    行尾$

查找不以r开头的   grep -v ^r grep.txt 



查找以数字开头的   grep ^[0-9]  grep.txt 
		grep ^[[:digit:]] grep.txt 


查找以大写字母开头的 grep ^[A-Z] grep.txt 或者 grep ^[[:upper:]] grep.txt 
查找以小写字母开头的 grep ^[a-z] grep.txt 或者 grep ^[[:lower:]] grep.txt 

查找以点结束的   grep "\."$ grep.txt 	--注意要引起来，而且要转义


去掉空格行    cat  grep.txt  |grep -v ^$	--以^$表示空格行


查找完全匹配abc的		grep  ^abc$	grep.txt


查找a用户在/etc/passwd里的行
# grep ^a: /etc/passwd
a:x:567:567::/home/a:/bin/bash


查找一行内只有三个字符长的行
grep ^...$ grep.txt 


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－


.  点号代表一个任意字符
*  代表零个或者多个前字符
.*  代表0个或多个任意字符


[root@li test]# cat grep.txt 
ggle
gogle
google
gooogle
gagle
gaagle
gaaagle
abcgef
abcdef


比较：
grep 'g.g' grep.txt 	--只要两个g字母中间有一个任意字符就可以
grep 'g*g' grep.txt	--只要有一个g字母就可以。等同于grep g grep.txt
grep 'go*g' grep.txt    --只要两个g字母中间有零个o或多个o就可以 
grep 'g.*g' grep.txt	--只要两个g字母中间有零个或任意个字符就可以
grep 'go.*g' grep.txt 	--只要go与g字母中间有零个或任意个字符就可以



查找每行里第四个字符为t的行
grep ^...t /etc/passwd



查找每行里倒数第六个字符为o的行
grep o.....$ /etc/passwd



查找每行里有s和n字符，并且中间有两个字符的行
grep s..n /etc/passwd



查找uid为4的行（只使用grep和正则表达式，不使用cut或awk的截取)
grep x:4: /etc/passwd
grep .*:.:4:.*:.*:.*:.* /etc/passwd


查找uid里包括4的行
grep .*:.:.*4.*:.*:.*:.*:.* /etc/passwd


查找/etc/passwd里注释列为空的行
grep .*:.*:.*:.*::.*:.* /etc/passwd



查找/etc/passwd里注释列不为空的行

grep -v .*:.*:.*:.*::.*:.* /etc/passwd

grep .*:.*:.*:.*:..*:.*:.* /etc/passwd



查找不能在登录界面用密码正常登录的用户（这里除开其它影响因素，只指/etc/shadow里第二列不为x或!开头的，也就是第二列要有密码串才可以登录)

 grep .*:[!x].*:.*:.*:.*:.*:.*:.*:.* /etc/shadow




========================================================


 gawk  -  pattern scanning and processing
       language



awk

调用有三种方式：

1,awk   -F"分隔符"  "command" filename
2,将所有命令插入一个文件，使它权限程序可执行，然后当成脚本调用它
3，是将所有的awk命令插入一个单独文件，然后调用
  awk -f awk-script-file  filename


字段的引用
＄ 字段操作符
$1代表第一列，$2代表第二列。。。n以此类推
$0代表整个输入记录


比较：
cut -d" "  -f1
sort -t" " -k1
awk -F" " '{print $1}'



比较用cut和awk截取IP
ifconfig eth0 |grep Bcast |cut -d ":" -f2|cut -d" " -f1

ifconfig eth0 |grep Bcast |awk -F: '{print $2}'|awk  '{print $1}'

ifconfig eth0 |grep Bcast | awk -F" " '{print $2}'|awk -F":" '{print $2}'
--awk默认以N个空格为分隔符


打印所有行    awk '{print $0}' /etc/passwd
打印第一列	 awk -F: '{print $1}' /etc/passwd
打印第一，三列  awk -F: '{print $1"\thaha\t"$3}' /etc/passwd
[root@li test]# awk -F":" '{print $1" 的uid是 "$3}' /etc/passwd
[root@dns ~]# awk -F":" '{print $1"的uid是"$3",登录shell 是 "$7}' /etc/passwd



$n    n不一定要用整数，也可以用变量值代替
echo a b c |awk 'BEGIN {one=1;two=2} {print $(one+two)}'


awk  -F:  ‘BEGIN {处理文件前执行的代码块} ｛处理文件过程中执行的代码块} END {处理文件后执行的代码块}'   filename


BEGIN	｛


｝
	｛


｝
END	｛

｝



[root@dns ~]# awk -F: 'BEGIN {print "这是第一行"} {print $0} END {print "这是最后一行"}' /etc/passwd 
这是第一行


比较下面这两句
awk -F: '{print "用户名\t\tUID"}{print $1"\t"$3}' /etc/passwd
awk -F: 'BEGIN{print "用户名\t\tUID"}{print $1"\t"$3}' /etc/passwd


用awk打印表格

结构如下:
# echo | awk '{print "第一行"} { print "第二行"} { print "第三行"} {print "第四行"}'
第一行
第二行
第三行
第四行


[root@li ~]# head -1 /etc/passwd  |awk -F: 'BEGIN {print "*************"} {print "*   "$1"    *"}{print "*   "$2"    *"}{print "*    "$3"   *"}{print "*    "$4"    *"}{print "*    "$5"    *"}{print "*    "$6"    *"}{print "*    "$7"    *"} END  {print "*************"}' 

*************
*   root    *
*   x    *
*    0   *
*    0    *
*    root    *
*    /root    *
*    /bin/bash    *
*************
--结果的对齐方面可以自己再去调整


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

--awk  内置变量

FS   设置分隔符，等同于－F
NF   代表字段数
$NF  代表最后一个字段数
NR   代表当前处理第几行



练习：用netstat -ntl 截取所有开放的端口号


 netstat -ntl |grep -v Active| grep -v Proto|awk '{print $4}'|awk -F: '{print $NF}'

netstat -ntlup |grep -Ev "Active|Proto" |awk '{print $4}' |awk -F: '{print $NF}'


grep增强模式
查找/etc/passwd里包含root或daemon的行
cat /etc/passwd |grep -E "(root|daemon)"
查找/etc/passwd里包含root或daemon或adm的行
cat /etc/passwd |egrep "(root|adm|daemon)"



练习：
cat 1.txt
1	2	3
1	2	3

cat 2.txt
a	b	c
a	b	c


要求得到结果
2	a	c
2	a	c

[root@li ~]# paste 1.txt 2.txt |awk '{print $2"\t"$4"\t"$6}'
2       a       c
2       a       c


awk关系操作符
==   等于
!=    不等于
>    大于
<    小于
>=   大于等于
<=   小于等于

awk逻辑操作符
&&	逻辑与
| |	逻辑或
！	非


awk运算操作符
+ - * / %
^  幂   比如：2的三次方  2^3   --/bin/bash里面求幂为2**3



打印第五行
head -5 /etc/passwd |tail -1
awk 'NR==5 {print $0}' /etc/passwd
打印第五行的第五列
head -5 /etc/passwd |tail -1 |cut -d":" -f5
awk -F":" 'NR==5 {print $5}' /etc/passwd


打印每一行的最后一列

打印第五行

打印每行的字段数

打印第五行的字段数

打印最后一行

打印最后一行的最后一列

打印前五行

打印五到十行，并在前面加上行号

打印奇数行 (删除偶数行)

打印偶数行 (删除奇数行)

删除五分之一的行（打印其五分之四的行，要求这五分之一的行号间隔平均)

打印/etc/passwd里普通用户的行

打印字段数大于6的行





打印所有的列数的总和
--提示：awk是由上往下一行一行的扫描，类似写shell脚本时的循环语句，在这里是自动循环
--思路：先定义一个变量值为0，每扫一行，就加上那一行的列数(NF),最后打印出结果





打印列数大于5的总行数
# awk -F: 'BEGIN {i=0} {NF>5; i=i+1} END {print i}' /etc/passwd
# awk -F: 'BEGIN {i=0} {if (NF>5) i=i+1} END {print i}' /etc/passwd




综合运算  echo |awk '{print 10^2+(90-80)}'

也可以进行浮点数运算 echo |awk '{print 10.9^2+(90.5-80.2)/3}'





例1：监控磁盘使用率，高于80%的找出来，输出警告，发送邮件给管理员






例2：计算swap总量，使用量，剩余量，使用百分比，剩余百分比 

格式要求为：
total	used	free	used%	free%
xxxxx	xxxx	xxxx	xxx%	xxx%

--提示：
[root@dns shell04]# echo | awk '{print "第一行"} { print "第二行"} { print "第三行"}'
第一行
第二行
第三行




＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝


--awk外部脚本

脚本的结构

BEGIN {
}
      {
}

END {
}


例 ：把 awk -F: '{print $1}' /etc/passwd 改成写外部脚本的形式


BEGIN {
        FS=":"
}
        {
        print $1
}

# awk -f 1.awk /etc/passwd	


例：  打印字段数大于5的总行数  （用脚本写）
awk -F: 'BEGIN {c=0} {if (NF>5) {c=c+1}} END {print c}' /etc/passwd


BEGIN {
     FS=":"
     c=0
}

{
         NF>5 		  --这两句用if来写的话  为:  if ( NF>5 )
        c=c+1 	    			    c=c+1	
}

END {
        print c
}


例：找出目录下的最大的文件和最小的文件，输出平均大小
思路： ls 有一个参数大写字母S，会把文件从大到小排序，排序后，最大文件就是第一行（NR＝1），最小文件就是最后一行，平均大小为（累计总大小/NR）；注意 grep -v 总计 这句如果是英文件系统，就换成grep -v Total

--横着写
[root@li shell04]# ll -S ../shell03/ |awk 'BEGIN {c=0} {if (NR==2) print "最大文件是:"$NF" 其大小为:"$5;c=c+$5} END {print "最小文件是:"$NF" 其大小为:"$5"\n所有文件平均大小为:"c/NR}'


--竖着写成脚本
BEGIN   {
        c=0
}
        {
        if (NR==2)
        print "最大文件为:"$NF"\t其大小为:"$5
        c=c+$5
}
END     {
        print "最小文件为:"$NF"\t其大小为:"$5
        print "平均大小为:"c/NR
}



[root@li shell04]# ll -S ../shell03/ |awk -f 3.awk 
最大文件为:shell03.txt  其大小为:7637
最小文件为:8.sh 其大小为:205
平均大小为:1893.17




====================================================

利用printf格式化输出

 [root@li shell04]# awk 'BEGIN {print "hello world"}'
hello world
[root@li shell04]# awk 'BEGIN {printf "hello world"}'
hello world[root@li shell04]# 


--从上面看到print和printf直接使用的主要区别就是printf不自动换行，需要使用\n来换行


格式：
printf {format_expression[,argument]}
两个主要的格式说明符是s和d,s代表字符串，d表示十进制整数



[root@li shell04]# ls -l|grep -v 总计|awk '{printf ("%d%s",$5,$NF)}'
32awk01.awk23awk02.awk21awk03.awk32awk04.awk72awk05.awk175awk06.awk7421shell04.txt7338shell04.txt~[root@li shell04]# 

[root@li shell04]# ls -l|grep -v 总计|awk '{printf ("%d\t%s\n",$5,$NF)}'
32      awk01.awk
23      awk02.awk
21      awk03.awk
32      awk04.awk
72      awk05.awk
175     awk06.awk
7610    shell04.txt
7473    shell04.txt~


[root@dns shell04]# ls -l|grep -v total |awk '{printf ("%s 的大小为 %d\n",$NF,$5)}'
123 的大小为 22510
1.awk 的大小为 94
1.sh 的大小为 14
2.awk 的大小为 86
3.awk 的大小为 197
china 的大小为 748395
shell04.txt 的大小为 8179
shell04.txt~ 的大小为 8125




例：倒序排序所有字段（/etc/passwd)

BEGIN {
        FS=":"
}
{
        for (i=NF;i>0;i--){
                if (i != 1) {
                        printf("%s%s",$i,FS)
                }
                else {
                        printf ("%s",$i) 
                }
                }
                printf ("\n")
}
END {
}

调用：
 awk -f awk07.awk /etc/passwd
可以看到结果倒序排列



-------------------------------

--awk字符匹配

==  完全精确匹配
~	匹配
!~      不匹配

完全匹配
awk -F: '$1=="oo" {print $0}' /etc/passwd

部分匹配
awk -F: '$1~"oo" {print $0}' /etc/passwd
awk -F: '$1~/oo/ {print $0}' /etc/passwd
	
不匹配
awk -F: '$1!="oo" {print $0}' /etc/passwd
awk -F: '$1!~"oo" {print $0}' /etc/passwd





例：统计/etc/passwd里以/sbin/nologin结束的用户名，把用户名打印出来，并统计个数

[root@dns shell04]# cat /etc/passwd |awk -F: 'BEGIN {a=0} { if ($7=="/sbin/nologin") {printf ("%s\t",$1);a=a+1} } END {print "\n\n总个数为:"a}'
bin     daemon  adm     lp      mail    uucp    operator games    gopher  ftp     nobody  nscd    vcsa    rpc     mailnull  smmsp   ntp     oprofile        pcap    dbus    avahi     xfs     rpcuser nfsnobody       sshd    haldaemongdm      avahi-autoipd   sabayon apache  named   cacti   postfix

总个数为:33





例：利用awk把不允许登录的账号名打印出来（指第七列不是以/bin/bash结束的列)，并统计个数


[root@dns shell04]# cat /etc/passwd |awk -F: 'BEGIN {a=0} { if ($7!="/bin/bash") {printf ("%s\t",$1);a=a+1} } END {print "\n\n总个数为:"a}'
bin     daemon  adm     lp      sync    shutdown        halt       mail    news    uucp    operator        games   gopher     ftp     nobody  nscd    vcsa    rpc     mailnull  smmsp    ntp     oprofile        pcap    dbus    avahi   xfsrpcuser nfsnobody       sshd    haldaemon       gdm     avahi-autoipd      sabayon apache  named   cacti   postfix

总个数为:37





--awk的字符串函数

长度函数
length()

打印出/etc/passwd的所有用户名，并统计其字符长度
awk -F: '{print $1,length($1)}' /etc/passwd

index  位置函数

找出oo字符串在/etc/passwd的所有用户名内的第几位
awk -F: '{print index($1,"oo")}' /etc/passwd

大小转换
toupper		
tolower		

awk -F: '{print tolower(toupper($1))}' /etc/passwd

substr  截取函数
awk -F: '{print substr($1,1,2)}' /etc/passwd




替换函数
sub  单替换
gsub  全替换



[root@li shell04]# awk -F: 'NR==1 {sub(/o/,"O",$0);print $0}' /etc/passwd 
rOot:x:0:0:root:/root:/bin/bash

[root@li shell04]# awk -F: 'NR==1 {gsub(/o/,"O",$0);print $0}' /etc/passwd 
rOOt:x:0:0:rOOt:/rOOt:/bin/bash


[root@dns shell04]# awk -F: 'NR==1 {gsub(/\/bin\/bash/,"/sbin/nologin",$0);print $0}' /etc/passwd 
root:x:0:0:root:/root:/sbin/nologin






题目：监控CPU 15分钟内的平均负载，如果超过5则发警告邮件给管理员








