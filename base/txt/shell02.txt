--

--运算的方法

	例一：运算符的写法
a=1
let a++			
let 'a+=2'
b=`expr $a + 3`         #注意＝号两边不要有空格，还有＋号两边要有空格
c=$((a+5))
d=$[a+7]


echo $a
echo $b
echo $c
echo $d


+
-
*
/
%
**

-------------------------------------------------------------------------

--常用的bash内部命令

echo     exit      continue      break

	例二：循环  （使用sh $0)

echo 'aaaaa'

sleep 3

sh $0		--这一句是代表再重新执行上面的代码 	

exit 10	--这个定义退出整个脚本，但是在这个脚本里永远也到不了这一步

---------------------------------------------

for 循环语句	

		for  var    in  1 2 3 4 5 
			do
				command
			done


		for (( var=1 ; var < 6 ; var++ ))
			do
				command
			done

		for (( var=5; var >0 ; var--))
			do
				command
			done

---------------------------------------------------------------------
例三： for循环举例

for  i   in 1 2 3 4 5
do
        echo -ne "$i\n"--如果不使用-n参数，默认会一个数字打印一行，-e参数代表后面如果使用\n(换行）,\t（制表符）等这种字符时会生效，所以这句和echo $i效果一样
done


for i  in `seq 100`		--产生1到100的序列
        do
        echo -n $i
done


for i in $(seq 100)		--也是产生1到100的序列，这是另一种写法
do
        echo -n $i
done



for i in {50..100}
do
        echo -n $i
done
echo



for  i  in  /etc/*	--也可以把一个目录下面所有文件和目录循环赋值给变量i，常用于批量改名或改权限
        do
        echo $i
done



计算1到100的奇数之和

批量加10个用户，以student1到student10命名，并统一加一个新组，组名为class,统一改密码为123（统一把密码改成就是自己的用户名，使用passwd命令和EOF结合?)

批量删除刚才建立的10个用户（包括把用户的家目录和邮件目录给删除干净)

写一个脚本，把能ping通的IP和不能ping通的IP分类，并保存到两个文本文件里（如果例举整个网段的254个IP花的时间比较长，可以只分类2.2.2.1到2.2.2.10这十个IP）


read输入一个目录，找出目录下为死链接的文件(如果要判断子目录下的所有文件又如何写?)






用read输入一个目录，使用脚本判断目录里每个文件的权限（是否可读，是否可写，是否可执行）






用read输入一个用户，再用read输入一个目录，使用脚本判断目录里每个文件的权限（read输入的用户对其是否可读，是否可写，是否可执行）
--提示：如何去用root用户去变成一个普通用户身份去执行脚本？ man su 查看-c参数



＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝


until	循环	--直到满足条件就退出循环
	
	例十二：用until实现打印1到5
a=1
until [ $a -gt 5 ]	  	for ((a=1;a<6;a++))
do
        echo $a
        let a++
done

练习：
使用unitl去改写上面的批量加用户的脚本	

groupadd class

i=1
until [ $i -gt 10 ]
do

        useradd -G class "student$i"
passwd "student$i" <<EOF > /dev/null 2>&1 
student$i
student$i
EOF		
let i++
done


=====================================================

while		用于不定次数的循环，或死循环

while  [条件]
do
	command
done


死循环两种：

while true
do
	command
done

while :
do
	command
done



写一个30秒就时间同步2.2.2.35一次的脚本







写一个小闹钟的程序  （每秒都显示时间，当到了时间，就循环打印5个*，间隔一秒)

--continue表示循环体内下面的代码不执行，重新开始循环
--break表示跳出循环体，执行循环体外的下面的代码
--exit表示直接跳出程序




写一个简单的猜数字的脚本





随机产生一个三位数，按位数一个一个的猜，每位只有五次猜的机会，不成功就没机会再猜，直到猜成功



===================================================================

随机数：
bash默认有一个$RANDOM的变量		使用set |grep RANDOM	查看上一次产生的随机数


echo $RANDOM

#产生0到１的随机数
ran1=`expr $RANDOM % 2`
echo $ran1

#产生100到200的随机数
ran2=`expr $RANDOM % 101 + 100`
echo $ran2

#产生50到100的随机数
ran3=$((RANDOM % 101))
while [ "$ran3" -lt 50 ]
        do
        ran3=$((RANDOM % 101))
done
echo $ran3



产生100内的随机数
echo $[$RANDOM%101]

产生0-1之间的随机数
echo $[$RANDOM%2]

产生1-2之内的随机数
echo $[$RANDOM%2+1]

产生50-100之内的随机数
echo $[$RANDOM%51+50]

产生三位数的随机数
echo $[$RANDOM%900+100]


=========================================================


找出/etc/的所有（包含子目录)以conf结尾的文件，拷到/tmp/conf目录下，然后全部把conf结尾换成以html结尾





找出/usr/share/doc目录下所有文件名为index.html的文件，把他们拷到/tmp/index目录下，文件名按找到的先后更改，第一个找到的为index.html.1,第二个找到的为index.html.2。。。。类推






=============================================================

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

循环嵌套

	
打印出
1		
12
123
1234
12345

*
**
***
****
*****
******

*
**
* *
*  *
*   *
******




题目：
写一个脚本把一个目录内的所有空文件都删除，最后输出删除的文件的个数





read输入一个用户，判断是否可以登录系统 ，是否可以登录ftp


#!/bin/bash


read -p "input a username:" username
echo

id $username


[ $? -eq 0 ] && echo "用户存在，继续" || exit 1

for i in `cat /etc/passwd |cut -d":" -f1,7`
do
        name=`echo $i |cut -d":" -f1`
        bash=`echo $i |cut -d":" -f2 | cut -d"/" -f3`

if [ "$name" = "$username" -a "$bash" = "bash" ];then
                echo "$name都可以登录"
elif
   [ "$name" = "$username" -a "$bash" = "nologin" ];then 
                echo "$name不可以登录系统，但可以登录ftp"
fi
done



判断所有的用户哪些可以登录系统 ，哪些可以登录ftp

#!/bin/bash


for i in `cat /etc/passwd | cut -d":" -f1,7`
do
        name=`echo $i |cut -d":" -f1`
        bash=`echo $i |cut -d":" -f2`
        [ $bash = /bin/bash ] && echo "$name可以登录系统，也可以登录ftp" 
        [ $bash = /sbin/nologin ] && echo "$name不可以登录系统，但可以登录ftp"
done




将/etc/passwd里的用户名分类，分为管理员用户，系统用户，普通用户











改写猜数字脚本，限制时间（比如说60秒，没有猜中就说时间到，并跳出脚本)









写一个倒计时脚本，要求显示离2012年1月1日的凌晨0点，还有多少天，多少时，多少分，多少秒











九九乘法表


1*1=1

1*2=2   2*2=4

1*3=3   2*3=6   3*3=9

1*4=4   2*4=8   3*4=12  4*4=16

1*5=5   2*5=10  3*5=15  4*5=20  5*5=25

1*6=6   2*6=12  3*6=18  4*6=24  5*6=30  6*6=36

1*7=7   2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=49

1*8=8   2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=64

1*9=9   2*9=18  3*9=27  4*9=36  5*9=45  6*9=54  7*9=63  8*9=72  9*9=81




#!/bin/bash
        i=1
        while [ $i -le 9 ]
        do
                n=1
                        while [ $n -le $i ]
                        do

                                r=$[$n*$i]
                                echo -en "$n*$i=$r\t"
                                let n=n+1

                        done
                echo -e "\n"
                let i=i+1
        done

